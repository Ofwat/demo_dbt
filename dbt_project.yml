
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: demo_dbt
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: demo_dbt

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
source-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
data-paths: ["data"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
    - "target"
    - "dbt_modules"

vars:
  dbt_utils_dispatch_list: ['tsql_utils']

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  demo_dbt:
    tables:
        materialized: table
    csvsView:
        schema: staging
        materialized: view
        stg_AMP_Year:
            column_types:
                AMP_name: varchar(100)
                Price_Review: varchar(100)
                start_year: int(100)
                end_year: int(100)
                start_date: date(100)
                end_date: date(100)
    viewTables:
        schema: staging
        materialized: view
    staging:
        schema: staging
        materialized: view
        stg_F_Sub_Measure_APR14_15:
            column_types:
                PCL: varchar(100)
                Reference: varchar(100)
                High: varchar(100)
                Low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_Sub_Measure_APR15_16:
            column_types:
                PCL: varchar(100)
                Reference: varchar(100)
                High: varchar(100)
                Low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_Sub_Measure_APR16_17:
            column_types:
                PCL: varchar(100)
                Reference: varchar(100)
                High: varchar(100)
                Low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_Sub_Measure_APR17_18:
            column_types:
                PCL: varchar(100)
                Reference: varchar(100)
                High: varchar(100)
                Low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_Sub_Measure_APR18_19:
            column_types:
                PCL: varchar(100)
                Reference: varchar(100)
                High: varchar(100)
                Low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_Sub_Measure_APR19_20:
            column_types:
                PCL: varchar(100)
                Reference: varchar(100)
                High: varchar(100)
                Low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_Sub_Measure_Union:
            column_types:
                PCL: varchar(100)
                Reference: varchar(100)
                High: varchar(100)
                Low: varchar(100)
                performance_level_met: varchar(100)
seeds:
    demo_dbt:
        +schema: staging
        +enabled: true
