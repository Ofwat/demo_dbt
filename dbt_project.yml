
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: demo_dbt
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: demo_dbt

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
source-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
data-paths: ["data"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
    - "target"
    - "dbt_modules"

vars:
  dbt_utils_dispatch_list: ['tsql_utils']

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
    tables:
        materialized: table
        D_Financial_incentive_type:
         column_types:
            financial_incentive_type_id: varchar(200) not null
            financial_incentive_type: varchar(50)
            financial_incentive_type_desc: varchar(50)
    csvsView:
        schema: staging
        materialized: view
        stg_AMP_year:
         column_types:
          amp_name: varchar(100)
          price_review: varchar(100)
          start_year: int(100)
          end_year: int(100)
          start_date: date(100)
          end_date: date(100)
    viewTables:
        schema: staging
        materialized: view
    staging:
        schema: staging
        materialized: view
        stg_F_sub_measure_apr_14_15:
            column_types:
                pcl: varchar(100)
                reference: varchar(100)
                high: varchar(100)
                low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_sub_measure_apr_15_16:
            column_types:
                pcl: varchar(100)
                reference: varchar(100)
                high: varchar(100)
                low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_sub_measure_apr_16_17:
            column_types:
                pcl: varchar(100)
                reference: varchar(100)
                high: varchar(100)
                low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_sub_measure_apr_17_18:
            column_types:
                pcl: varchar(100)
                reference: varchar(100)
                high: varchar(100)
                low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_sub_measure_apr_18_19:
            column_types:
                pcl: varchar(100)
                reference: varchar(100)
                high: varchar(100)
                low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_sub_measure_apr_19_20:
            column_types:
                pcl: varchar(100)
                reference: varchar(100)
                high: varchar(100)
                low: varchar(100)
                performance_level_met: varchar(100)
        stg_F_sub_measure_apr_union:
            column_types:
                pcl: varchar(100)
                reference: varchar(100)
                high: varchar(100)
                low: varchar(100)
                performance_level_met: varchar(100)
seeds:
    demo_dbt:
        +schema: staging
        +enabled: true
